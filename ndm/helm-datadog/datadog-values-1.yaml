nameOverride: null
fullnameOverride: null
targetSystem: linux
registry: gcr.io/datadoghq
datadog:
  apiKey: <DATADOG_API_KEY>
  apiKeyExistingSecret: null
  appKey: null
  appKeyExistingSecret: null
  secretBackend:
    command: null
    arguments: null
    timeout: null
  securityContext:
    runAsUser: 0
  hostVolumeMountPropagation: None
  clusterName: null
  site: null
  dd_url: null
  logLevel: INFO
  kubeStateMetricsEnabled: true
  kubeStateMetricsNetworkPolicy:
    create: false
  kubeStateMetricsCore:
    enabled: false
    ignoreLegacyKSMCheck: true
    collectSecretMetrics: true
    collectVpaMetrics: false
    useClusterCheckRunners: false
    labelsAsTags: {}
  clusterChecks:
    enabled: true
    shareProcessNamespace: false
  nodeLabelsAsTags: {}
  podLabelsAsTags: {}
  podAnnotationsAsTags: {}
  namespaceLabelsAsTags: {}
  tags: []
  checksCardinality: null
  kubelet:
    host:
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    tlsVerify: null
    hostCAPath: /etc/kubernetes/certs/kubeletserver.crt
    agentCAPath: null
    podLogsPath: null
  expvarPort: 6000
  dogstatsd:
    port: 8125
    originDetection: false
    tags: []
    tagCardinality: low
    useSocketVolume: true
    socketPath: /var/run/datadog/dsd.socket
    hostSocketPath: /var/run/datadog/
    useHostPort: false
    useHostPID: false
    nonLocalTraffic: true
  collectEvents: true
  leaderElection: true
  leaderLeaseDuration: null
  logs:
    enabled: false
    containerCollectAll: false
    containerCollectUsingFiles: true
    autoMultiLineDetection: false
  apm:
    socketEnabled: true
    portEnabled: false
    enabled: false
    port: 8126
    useSocketVolume: false
    socketPath: /var/run/datadog/apm.socket
    hostSocketPath: /var/run/datadog/
  envFrom: []
  env: []
  confd: {}
  checksd: {}
  dockerSocketPath: null
  criSocketPath: null
  containerRuntimeSupport:
    enabled: true
  processAgent:
    enabled: true
    processCollection: false
    stripProcessArguments: false
    processDiscovery: false
  systemProbe:
    debugPort: 0
    enableConntrack: true
    seccomp: localhost/system-probe
    seccompRoot: /var/lib/kubelet/seccomp
    bpfDebug: false
    apparmor: unconfined
    enableTCPQueueLength: false
    enableOOMKill: false
    enableRuntimeCompiler: false
    enableKernelHeaderDownload: false
    mountPackageManagementDirs: []
    osReleasePath: null
    runtimeCompilationAssetDir: /var/tmp/datadog-agent/system-probe
    collectDNSStats: true
    maxTrackedConnections: 131072
    conntrackMaxStateSize: 131072
    conntrackInitTimeout: 10s
  orchestratorExplorer:
    enabled: true
    container_scrubbing:
      enabled: true
  helmCheck:
    enabled: false
    collectEvents: false
  networkMonitoring:
    enabled: false
  serviceMonitoring:
    enabled: false
  securityAgent:
    compliance:
      enabled: false
      configMap: null
      checkInterval: 20m
    runtime:
      enabled: false
      policies:
        configMap: null
      syscallMonitor:
        enabled: false
  networkPolicy:
    create: false
    flavor: kubernetes
    cilium:
      dnsSelector:
        toEndpoints:
          - matchLabels:
              'k8s:io.kubernetes.pod.namespace': kube-system
              'k8s:k8s-app': kube-dns
  prometheusScrape:
    enabled: false
    serviceEndpoints: false
    additionalConfigs: []
    version: 2
  ignoreAutoConfig: []
  containerExclude: null
  containerInclude: null
  containerExcludeLogs: null
  containerIncludeLogs: null
  containerExcludeMetrics: null
  containerIncludeMetrics: null
  excludePauseContainer: true
clusterAgent:
  enabled: true
  shareProcessNamespace: false
  image:
    name: cluster-agent
    #tag: 1.19.0
    tag: latest
    repository: null
    pullPolicy: IfNotPresent
    pullSecrets: []
  securityContext: {}
  containers:
    clusterAgent:
      securityContext: {}
  command: []
  token: ''
  tokenExistingSecret: ''
  replicas: 1
  revisionHistoryLimit: 10
  rbac:
    create: true
    serviceAccountName: default
    serviceAccountAnnotations: {}
  podSecurity:
    podSecurityPolicy:
      create: false
    securityContextConstraints:
      create: false
  metricsProvider:
    enabled: false
    wpaController: false
    useDatadogMetrics: false
    createReaderRbac: true
    aggregator: avg
    service:
      type: ClusterIP
      port: 8443
    endpoint: null
  env: []
  envFrom: []
  admissionController:
    enabled: false
    mutateUnlabelled: false
  confd:
    kube_apiserver_metrics.yaml: |-
      cluster_check: true
      init_config:
      instances:
        - prometheus_url: https://kubernetes.default/metrics
          ssl_ca_cert: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_auth: true
    snmp.yaml: |-
      cluster_check: true
      init_config:
        loader: core
        use_device_id_as_hostname: true
      instances:
        - ip_address: 10.224.0.7
          port: 1161
          community_string: public
          snmp_version: 2
          timeout: 5
          retries: 5
          loader: core
          use_device_id_as_hostname: true
  advancedConfd: {}
  resources: {}
  priorityClassName: null
  nodeSelector: {}
  tolerations: []
  affinity: {}
  healthPort: 5556
  livenessProbe:
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  deploymentAnnotations: {}
  podAnnotations: {}
  useHostNetwork: false
  dnsConfig: {}
  volumes: []
  volumeMounts: []
#  datadog_cluster_yaml: []
#  datadog_cluster_yaml:
#    listeners:
#      - name: snmp
#    snmp_listener:
#      workers: 2
#      discovery_interval: 10
#      configs:
#        - network: 10.224.0.7/32
#          version: 2
#          port: 1161
#          community: public
  createPodDisruptionBudget: false
  networkPolicy:
    create: false
  additionalLabels: {}
existingClusterAgent:
  join: false
  tokenSecretName: null
  serviceName: null
  clusterchecksEnabled: true
agents:
  enabled: true
  shareProcessNamespace: false
  revisionHistoryLimit: 10
  image:
    name: agent
    tag: latest
    tagSuffix: ''
    repository: null
    doNotCheckTag: null
    pullPolicy: IfNotPresent
    pullSecrets: []
  rbac:
    create: true
    serviceAccountName: default
    serviceAccountAnnotations: {}
  podSecurity:
    podSecurityPolicy:
      create: false
    securityContextConstraints:
      create: false
    seLinuxContext:
      rule: MustRunAs
      seLinuxOptions:
        user: system_u
        role: system_r
        type: spc_t
        level: s0
    privileged: false
    capabilities:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN
      - AUDIT_CONTROL
      - AUDIT_READ
    allowedUnsafeSysctls: []
    volumes:
      - configMap
      - downwardAPI
      - emptyDir
      - hostPath
      - secret
    seccompProfiles:
      - runtime/default
      - localhost/system-probe
    apparmor:
      enabled: true
    apparmorProfiles:
      - runtime/default
      - unconfined
    defaultApparmor: runtime/default
  containers:
    agent:
      env: []
      envFrom: []
      logLevel: null
      resources: {}
      healthPort: 5555
      livenessProbe:
        initialDelaySeconds: 15
        periodSeconds: 15
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 6
      readinessProbe:
        initialDelaySeconds: 15
        periodSeconds: 15
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 6
      securityContext: {}
      ports: []
    processAgent:
      env: []
      envFrom: []
      logLevel: null
      resources: {}
      securityContext: {}
      ports: []
    traceAgent:
      env: null
      envFrom: []
      logLevel: null
      resources: {}
      livenessProbe:
        initialDelaySeconds: 15
        periodSeconds: 15
        timeoutSeconds: 5
      securityContext: {}
      ports: []
    systemProbe:
      env: []
      envFrom: []
      logLevel: null
      resources: {}
      securityContext:
        privileged: false
        capabilities:
          add:
            - SYS_ADMIN
            - SYS_RESOURCE
            - SYS_PTRACE
            - NET_ADMIN
            - NET_BROADCAST
            - NET_RAW
            - IPC_LOCK
            - CHOWN
      ports: []
    securityAgent:
      env: null
      envFrom: []
      logLevel: null
      resources: {}
      ports: []
    initContainers:
      resources: {}
  volumes: []
  volumeMounts: []
  useHostNetwork: false
  dnsConfig: {}
  daemonsetAnnotations: {}
  podAnnotations: {}
  tolerations: []
  nodeSelector: {}
  affinity: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  priorityClassCreate: false
  priorityClassName: null
  priorityClassValue: 1000000000
  podLabels: {}
  additionalLabels: {}
  useConfigMap: null
  customAgentConfig: {}
  networkPolicy:
    create: false
  localService:
    overrideName: ''
    forceLocalServiceEnabled: false
clusterChecksRunner:
  enabled: false
  image:
    name: agent
    tag: latest
    tagSuffix: ''
    repository: null
    pullPolicy: IfNotPresent
    pullSecrets: []
  createPodDisruptionBudget: false
  rbac:
    create: true
    dedicated: false
    serviceAccountAnnotations: {}
    serviceAccountName: default
  replicas: 3
  revisionHistoryLimit: 10
  resources: {}
  affinity: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  dnsConfig: {}
  priorityClassName: null
  nodeSelector: {}
  tolerations: []
  healthPort: 5557
  livenessProbe:
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  deploymentAnnotations: {}
  podAnnotations: {}
  env: []
  envFrom: []
  volumes: []
  volumeMounts: []
  networkPolicy:
    create: false
  additionalLabels: {}
  securityContext: {}
  ports: []
datadog-crds:
  crds:
    datadogMetrics: true
kube-state-metrics:
  rbac:
    create: true
  serviceAccount:
    create: true
    name: null
  resources: {}
  nodeSelector:
    kubernetes.io/os: linux
providers:
  gke:
    autopilot: false
  eks:
    ec2:
      useHostnameFromFile: false
