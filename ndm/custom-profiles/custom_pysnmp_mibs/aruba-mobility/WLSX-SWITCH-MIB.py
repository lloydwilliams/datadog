#
# PySNMP MIB module WLSX-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/lloyd.williams/u01/snmp/mibdump/asn1/WLSX-SWITCH-MIB
# Produced by pysmi-0.3.4 at Tue Jan 31 16:14:01 2023
# On host COMP-C02DW0E1ML87 platform Darwin version 21.6.0 by user lloyd.williams
# Using Python version 3.11.1 (v3.11.1:a7a450f84a, Dec  6 2022, 15:24:06) [Clang 13.0.0 (clang-1300.0.29.30)]
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Counter64, Gauge32, Bits, Integer32, Unsigned32, snmpModules, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, IpAddress, iso, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Gauge32", "Bits", "Integer32", "Unsigned32", "snmpModules", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "IpAddress", "iso", "ModuleIdentity", "ObjectIdentity")
DisplayString, TruthValue, TAddress, TextualConvention, StorageType, TDomain, MacAddress, RowStatus, TimeInterval, TestAndIncr, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TAddress", "TextualConvention", "StorageType", "TDomain", "MacAddress", "RowStatus", "TimeInterval", "TestAndIncr", "PhysAddress")
wlsxSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1))
wlsxSwitchMIB.setRevisions(('1908-04-16 02:06',))
if mibBuilder.loadTexts: wlsxSwitchMIB.setLastUpdated('0804160206Z')
if mibBuilder.loadTexts: wlsxSwitchMIB.setOrganization('Aruba Wireless Networks')
wlsxSystemXGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1))
wlsxUserInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2))
wlsxAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3))
wlsxSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100))
wlsxHostname = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxHostname.setStatus('current')
wlsxModelName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxModelName.setStatus('current')
wlsxSwitchIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchIp.setStatus('current')
wlsxSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3), ("branch", 4), ("md", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchRole.setStatus('current')
wlsxSwitchMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchMasterIp.setStatus('current')
wlsxSwitchListTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6), )
if mibBuilder.loadTexts: wlsxSwitchListTable.setStatus('current')
wlsxSwitchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "switchListSwitchIPAddress"))
if mibBuilder.loadTexts: wlsxSwitchListEntry.setStatus('current')
switchListSwitchIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: switchListSwitchIPAddress.setStatus('current')
switchListSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("local", 2), ("standbymaster", 3), ("branch", 4), ("md", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchListSwitchRole.setStatus('current')
wlsxSwitchLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseCount.setStatus('current')
wlsxSwitchLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: wlsxSwitchLicenseTable.setStatus('current')
wlsxLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "licenseIndex"))
if mibBuilder.loadTexts: wlsxLicenseEntry.setStatus('current')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
licenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKey.setStatus('current')
licenseInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstalled.setStatus('current')
licenseExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpires.setStatus('current')
licenseFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFlags.setStatus('current')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('current')
wlsxSysXProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9), )
if mibBuilder.loadTexts: wlsxSysXProcessorTable.setStatus('current')
wlsxSysXProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXProcessorID"))
if mibBuilder.loadTexts: wlsxSysXProcessorEntry.setStatus('current')
sysXProcessorID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXProcessorID.setStatus('current')
sysXProcessorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorDescr.setStatus('current')
sysXProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXProcessorLoad.setStatus('current')
wlsxSysXStorageTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10), )
if mibBuilder.loadTexts: wlsxSysXStorageTable.setStatus('current')
wlsxSysXStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXStorageIndex"))
if mibBuilder.loadTexts: wlsxSysXStorageEntry.setStatus('current')
sysXStorageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXStorageIndex.setStatus('current')
sysXStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ram", 1), ("flashMemory", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageType.setStatus('current')
sysXStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageSize.setStatus('current')
sysXStorageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageUsed.setStatus('current')
sysXStorageName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXStorageName.setStatus('current')
wlsxSysXMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11), )
if mibBuilder.loadTexts: wlsxSysXMemoryTable.setStatus('current')
wlsxSysXMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "sysXMemoryIndex"))
if mibBuilder.loadTexts: wlsxSysXMemoryEntry.setStatus('current')
sysXMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: sysXMemoryIndex.setStatus('current')
sysXMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemorySize.setStatus('current')
sysXMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryUsed.setStatus('current')
sysXMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXMemoryFree.setStatus('current')
wlsxSwitchLicenseSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchLicenseSerialNumber.setStatus('current')
wlsxSwitchIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchIpv6.setStatus('current')
wlsxSwitchMasterIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchMasterIpv6.setStatus('current')
wlsxSwitchUserTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wlsxSwitchUserTable.setStatus('current')
wlsxSwitchUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "userIpAddress"))
if mibBuilder.loadTexts: wlsxSwitchUserEntry.setStatus('current')
userIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: userIpAddress.setStatus('current')
userPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPhyAddress.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
userUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUpTime.setStatus('current')
userAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("web", 3), ("dot1x", 4), ("vpn", 5), ("mac", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('current')
userLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLocation.setStatus('current')
userServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userServerName.setStatus('current')
userConnectedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedVlan.setStatus('current')
userConnectedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedSlot.setStatus('current')
userConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedPort.setStatus('current')
userBWContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractName.setStatus('current')
userBWContractUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userBWContractUsage.setStatus('current')
userConnectedModule = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConnectedModule.setStatus('current')
wlsxSwitchStationMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wlsxSwitchStationMgmtTable.setStatus('current')
wlsxSwitchStationMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationMgmtEntry.setStatus('current')
staPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: staPhyAddress.setStatus('current')
staAccessPointBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: staAccessPointBSSID.setStatus('current')
staUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserName.setStatus('current')
staUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staUserRole.setStatus('current')
staAssociationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssociationID.setStatus('current')
staAccessPointESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAccessPointESSID.setStatus('current')
staSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staSignalToNoiseRatio.setStatus('current')
staTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTransmitRate.setStatus('current')
staReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staReceiveRate.setStatus('current')
wlsxSwitchStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wlsxSwitchStationStatsTable.setStatus('current')
wlsxSwitchStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "staPhyAddress"), (0, "WLSX-SWITCH-MIB", "staAccessPointBSSID"))
if mibBuilder.loadTexts: wlsxSwitchStationStatsEntry.setStatus('current')
staTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxPackets.setStatus('current')
staTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxBytes.setStatus('current')
staRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxPackets.setStatus('current')
staRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRxBytes.setStatus('current')
staBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staBwRate.setStatus('current')
staFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameRetryRate.setStatus('current')
staFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameLowSpeedRate.setStatus('current')
staFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameNonUnicastRate.setStatus('current')
staFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameFragmentationRate.setStatus('current')
staFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staFrameReceiveErrorRate.setStatus('current')
wlsxSwitchTotalNumAccessPoints = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumAccessPoints.setStatus('current')
wlsxSwitchTotalNumStationsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSwitchTotalNumStationsAssociated.setStatus('current')
wlsxSwitchAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: wlsxSwitchAccessPointTable.setStatus('current')
wlsxSwitchAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointEntry.setStatus('current')
apBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: apBSSID.setStatus('current')
apESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apESSID.setStatus('current')
apSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSlot.setStatus('current')
apPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPort.setStatus('current')
apIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpAddress.setStatus('current')
apPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPhyType.setStatus('current')
apType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ap", 1), ("am", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apType.setStatus('current')
apCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrentChannel.setStatus('current')
apLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLocation.setStatus('current')
apTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalTime.setStatus('current')
apInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInactiveTime.setStatus('current')
apLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadBalancing.setStatus('current')
apChannelNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelNoise.setStatus('current')
apSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSignalToNoiseRatio.setStatus('current')
apTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTransmitRate.setStatus('current')
apReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5point5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReceiveRate.setStatus('current')
wlsxSwitchGlobalAPTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4), )
if mibBuilder.loadTexts: wlsxSwitchGlobalAPTable.setStatus('deprecated')
wlsxSwitchGlobalAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "globalAPLocation"), (0, "WLSX-SWITCH-MIB", "globalAPAddress"))
if mibBuilder.loadTexts: wlsxSwitchGlobalAPEntry.setStatus('deprecated')
globalAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: globalAPLocation.setStatus('deprecated')
globalAPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: globalAPAddress.setStatus('deprecated')
globalAPLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPLocalSwitch.setStatus('deprecated')
globalAPdot11aPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11aPhyAddr.setStatus('deprecated')
globalAPdot11bPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11bPhyAddr.setStatus('deprecated')
globalAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPState.setStatus('deprecated')
globalAPdot11gPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 4, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalAPdot11gPhyAddr.setStatus('deprecated')
wlsxSwitchAccessPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5), )
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsTable.setStatus('current')
wlsxSwitchAccessPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1), ).setIndexNames((0, "WLSX-SWITCH-MIB", "apBSSID"))
if mibBuilder.loadTexts: wlsxSwitchAccessPointStatsEntry.setStatus('current')
apStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apStatsChannel.setStatus('current')
apChannelBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelBwRate.setStatus('current')
apChannelFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameRetryRate.setStatus('current')
apChannelFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameLowSpeedRate.setStatus('current')
apChannelFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameNonUnicastRate.setStatus('current')
apChannelFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameFragmentationRate.setStatus('current')
apChannelFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChannelFrameReceiveErrorRate.setStatus('current')
apBSSTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxPackets.setStatus('current')
apBSSTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSTxBytes.setStatus('current')
apBSSRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxPackets.setStatus('current')
apBSSRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSRxBytes.setStatus('current')
apBSSBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSBwRate.setStatus('current')
apBSSFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameRetryRate.setStatus('current')
apBSSFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameLowSpeedRate.setStatus('current')
apBSSFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameNonUnicastRate.setStatus('current')
apBSSFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameFragmentationRate.setStatus('current')
apBSSFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 3, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apBSSFrameReceiveErrorRate.setStatus('current')
wlsxSwitchTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100))
wlsxAuthServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerName.setStatus('current')
wlsxAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxAuthServerTimeout.setStatus('current')
wlsxFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxFanNumber.setStatus('current')
wlsxLineCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLineCardNumber.setStatus('current')
wlsxVoltageType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageType.setStatus('current')
wlsxVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVoltageValue.setStatus('current')
wlsxTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxTemperatureValue.setStatus('current')
wlsxProcessName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxProcessName.setStatus('current')
wlsxStationMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationMacAddress.setStatus('current')
wlsxStationBlackListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100))).clone(namedValues=NamedValues(("userDefined", 1), ("mitmAttack", 2), ("authFailure", 3), ("pingFlood", 4), ("sessionFlood", 5), ("synFlood", 6), ("sessionBlacklist", 7), ("ipSpoofing", 8), ("other", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxStationBlackListReason.setStatus('current')
wlsxSpoofedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedIpAddress.setStatus('current')
wlsxSpoofedOldPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedOldPhyAddress.setStatus('current')
wlsxSpoofedNewPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSpoofedNewPhyAddress.setStatus('current')
wlsxDBName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBName.setStatus('current')
wlsxDBUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBUserName.setStatus('current')
wlsxDBIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBIpAddress.setStatus('current')
wlsxDBType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mssql", 1), ("mysql", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxDBType.setStatus('current')
wlsxVrID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrID.setStatus('current')
wlsxVrMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrMasterIp.setStatus('current')
wlsxVrrpOperState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxVrrpOperState.setStatus('current')
wlsxApTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxApTxPower.setStatus('current')
wlsxESIServerGrpName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerGrpName.setStatus('current')
wlsxESIServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerName.setStatus('current')
wlsxESIServerIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxESIServerIpaddress.setStatus('current')
wlsxLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxLicenseDaysRemaining.setStatus('current')
wlsxSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 100, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxSlotNumber.setStatus('current')
wlsxSwitchIPChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1001)).setObjects(("WLSX-SWITCH-MIB", "wlsxSwitchIp"))
if mibBuilder.loadTexts: wlsxSwitchIPChanged.setStatus('current')
wlsxSwitchRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1002)).setObjects(("WLSX-SWITCH-MIB", "wlsxSwitchRole"))
if mibBuilder.loadTexts: wlsxSwitchRoleChange.setStatus('current')
wlsxUserEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1003)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryCreated.setStatus('current')
wlsxUserEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1004)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryDeleted.setStatus('current')
wlsxUserEntryAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1005)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"), ("WLSX-SWITCH-MIB", "userName"), ("WLSX-SWITCH-MIB", "userAuthenticationMethod"), ("WLSX-SWITCH-MIB", "userRole"))
if mibBuilder.loadTexts: wlsxUserEntryAuthenticated.setStatus('current')
wlsxUserEntryDeAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1006)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserEntryDeAuthenticated.setStatus('current')
wlsxUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1007)).setObjects(("WLSX-SWITCH-MIB", "userPhyAddress"))
if mibBuilder.loadTexts: wlsxUserAuthenticationFailed.setStatus('current')
wlsxAuthServerReqTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1008)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"))
if mibBuilder.loadTexts: wlsxAuthServerReqTimedOut.setStatus('current')
wlsxAuthServerTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1009)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"), ("WLSX-SWITCH-MIB", "wlsxAuthServerTimeout"))
if mibBuilder.loadTexts: wlsxAuthServerTimedOut.setStatus('current')
wlsxAuthServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1010)).setObjects(("WLSX-SWITCH-MIB", "wlsxAuthServerName"))
if mibBuilder.loadTexts: wlsxAuthServerIsUp.setStatus('current')
wlsxAuthMaxUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1011))
if mibBuilder.loadTexts: wlsxAuthMaxUserEntries.setStatus('current')
wlsxAuthMaxAclEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1012))
if mibBuilder.loadTexts: wlsxAuthMaxAclEntries.setStatus('current')
wlsxAuthMaxBWContracts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1013))
if mibBuilder.loadTexts: wlsxAuthMaxBWContracts.setStatus('current')
wlsxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1014))
if mibBuilder.loadTexts: wlsxPowerSupplyFailure.setStatus('current')
wlsxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1015)).setObjects(("WLSX-SWITCH-MIB", "wlsxFanNumber"))
if mibBuilder.loadTexts: wlsxFanFailure.setStatus('current')
wlsxOutOfRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1016)).setObjects(("WLSX-SWITCH-MIB", "wlsxVoltageType"), ("WLSX-SWITCH-MIB", "wlsxVoltageValue"))
if mibBuilder.loadTexts: wlsxOutOfRangeVoltage.setStatus('current')
wlsxOutOfRangeTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1017)).setObjects(("WLSX-SWITCH-MIB", "wlsxTemperatureValue"))
if mibBuilder.loadTexts: wlsxOutOfRangeTemperature.setStatus('current')
wlsxLCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1018)).setObjects(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"))
if mibBuilder.loadTexts: wlsxLCInserted.setStatus('current')
wlsxSCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1019))
if mibBuilder.loadTexts: wlsxSCInserted.setStatus('current')
wlsxGBICInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1020))
if mibBuilder.loadTexts: wlsxGBICInserted.setStatus('current')
wlsxProcessDied = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1021)).setObjects(("WLSX-SWITCH-MIB", "wlsxProcessName"))
if mibBuilder.loadTexts: wlsxProcessDied.setStatus('current')
wlsxProcessExceedsMemoryLimits = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1022)).setObjects(("WLSX-SWITCH-MIB", "wlsxProcessName"))
if mibBuilder.loadTexts: wlsxProcessExceedsMemoryLimits.setStatus('current')
wlsxLowOnFlashSpace = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1023))
if mibBuilder.loadTexts: wlsxLowOnFlashSpace.setStatus('current')
wlsxLowMemory = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1024))
if mibBuilder.loadTexts: wlsxLowMemory.setStatus('current')
wlsxFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1025))
if mibBuilder.loadTexts: wlsxFanTrayRemoved.setStatus('current')
wlsxFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1026))
if mibBuilder.loadTexts: wlsxFanTrayInserted.setStatus('current')
wlsxLCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1027)).setObjects(("WLSX-SWITCH-MIB", "wlsxLineCardNumber"), ("WLSX-SWITCH-MIB", "wlsxSlotNumber"))
if mibBuilder.loadTexts: wlsxLCRemoved.setStatus('current')
wlsxSCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1028))
if mibBuilder.loadTexts: wlsxSCRemoved.setStatus('current')
wlsxPowerSupplyMissing = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1029))
if mibBuilder.loadTexts: wlsxPowerSupplyMissing.setStatus('current')
wlsxAccessPointIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1030)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"))
if mibBuilder.loadTexts: wlsxAccessPointIsUp.setStatus('deprecated')
wlsxAccessPointIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1031)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"))
if mibBuilder.loadTexts: wlsxAccessPointIsDown.setStatus('deprecated')
wlsxCoverageHoleDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1032)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "wlsxStationMacAddress"))
if mibBuilder.loadTexts: wlsxCoverageHoleDetected.setStatus('current')
wlsxChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1033)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apCurrentChannel"))
if mibBuilder.loadTexts: wlsxChannelChanged.setStatus('deprecated')
wlsxStationAddedToBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1034)).setObjects(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"), ("WLSX-SWITCH-MIB", "wlsxStationBlackListReason"))
if mibBuilder.loadTexts: wlsxStationAddedToBlackList.setStatus('current')
wlsxStationRemovedFromBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1035)).setObjects(("WLSX-SWITCH-MIB", "wlsxStationMacAddress"))
if mibBuilder.loadTexts: wlsxStationRemovedFromBlackList.setStatus('current')
wlsxIpSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1036)).setObjects(("WLSX-SWITCH-MIB", "wlsxSpoofedIpAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedOldPhyAddress"), ("WLSX-SWITCH-MIB", "wlsxSpoofedNewPhyAddress"))
if mibBuilder.loadTexts: wlsxIpSpoofingDetected.setStatus('current')
wlsxDBCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1037)).setObjects(("WLSX-SWITCH-MIB", "wlsxDBName"), ("WLSX-SWITCH-MIB", "wlsxDBUserName"), ("WLSX-SWITCH-MIB", "wlsxDBIpAddress"), ("WLSX-SWITCH-MIB", "wlsxDBType"))
if mibBuilder.loadTexts: wlsxDBCommunicationFailure.setStatus('current')
wlsxVrrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1038)).setObjects(("WLSX-SWITCH-MIB", "wlsxVrID"), ("WLSX-SWITCH-MIB", "wlsxVrMasterIp"), ("WLSX-SWITCH-MIB", "wlsxVrrpOperState"))
if mibBuilder.loadTexts: wlsxVrrpStateChange.setStatus('current')
wlsxAPRadioAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1039)).setObjects(("WLSX-SWITCH-MIB", "apLocation"), ("WLSX-SWITCH-MIB", "apIpAddress"), ("WLSX-SWITCH-MIB", "apCurrentChannel"), ("WLSX-SWITCH-MIB", "wlsxApTxPower"))
if mibBuilder.loadTexts: wlsxAPRadioAttributesChanged.setStatus('current')
wlsxESIServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1040)).setObjects(("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"))
if mibBuilder.loadTexts: wlsxESIServerUp.setStatus('current')
wlsxESIServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1041)).setObjects(("WLSX-SWITCH-MIB", "wlsxESIServerGrpName"), ("WLSX-SWITCH-MIB", "wlsxESIServerName"), ("WLSX-SWITCH-MIB", "wlsxESIServerIpaddress"))
if mibBuilder.loadTexts: wlsxESIServerDown.setStatus('current')
wlsxLicenseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1042)).setObjects(("WLSX-SWITCH-MIB", "wlsxLicenseDaysRemaining"))
if mibBuilder.loadTexts: wlsxLicenseExpiry.setStatus('current')
wlsxAceUseageThreshold = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1043))
if mibBuilder.loadTexts: wlsxAceUseageThreshold.setStatus('current')
wlsxFanAbsent = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1044)).setObjects(("WLSX-SWITCH-MIB", "wlsxFanNumber"))
if mibBuilder.loadTexts: wlsxFanAbsent.setStatus('current')
wlsxWebCCLicenseEnforcement = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 1, 100, 1045))
if mibBuilder.loadTexts: wlsxWebCCLicenseEnforcement.setStatus('current')
mibBuilder.exportSymbols("WLSX-SWITCH-MIB", apLoadBalancing=apLoadBalancing, licenseIndex=licenseIndex, wlsxSCInserted=wlsxSCInserted, wlsxFanAbsent=wlsxFanAbsent, userConnectedModule=userConnectedModule, sysXStorageName=sysXStorageName, wlsxSwitchLicenseSerialNumber=wlsxSwitchLicenseSerialNumber, wlsxIpSpoofingDetected=wlsxIpSpoofingDetected, wlsxSwitchAccessPointStatsTable=wlsxSwitchAccessPointStatsTable, apTransmitRate=apTransmitRate, wlsxAuthServerTimedOut=wlsxAuthServerTimedOut, sysXStorageUsed=sysXStorageUsed, wlsxOutOfRangeVoltage=wlsxOutOfRangeVoltage, wlsxSpoofedOldPhyAddress=wlsxSpoofedOldPhyAddress, wlsxSwitchAccessPointTable=wlsxSwitchAccessPointTable, wlsxSwitchStationStatsTable=wlsxSwitchStationStatsTable, sysXStorageType=sysXStorageType, apStatsChannel=apStatsChannel, wlsxUserAuthenticationFailed=wlsxUserAuthenticationFailed, wlsxLowOnFlashSpace=wlsxLowOnFlashSpace, userIpAddress=userIpAddress, wlsxAuthMaxBWContracts=wlsxAuthMaxBWContracts, userServerName=userServerName, sysXMemoryFree=sysXMemoryFree, staSignalToNoiseRatio=staSignalToNoiseRatio, wlsxFanTrayRemoved=wlsxFanTrayRemoved, staAssociationID=staAssociationID, sysXStorageSize=sysXStorageSize, staReceiveRate=staReceiveRate, wlsxStationRemovedFromBlackList=wlsxStationRemovedFromBlackList, staBwRate=staBwRate, wlsxSwitchTotalNumAccessPoints=wlsxSwitchTotalNumAccessPoints, apBSSFrameLowSpeedRate=apBSSFrameLowSpeedRate, wlsxFanNumber=wlsxFanNumber, wlsxSpoofedIpAddress=wlsxSpoofedIpAddress, wlsxProcessName=wlsxProcessName, sysXMemoryIndex=sysXMemoryIndex, wlsxDBName=wlsxDBName, wlsxESIServerGrpName=wlsxESIServerGrpName, wlsxStationMacAddress=wlsxStationMacAddress, wlsxAuthMaxUserEntries=wlsxAuthMaxUserEntries, wlsxSystemXGroup=wlsxSystemXGroup, apInactiveTime=apInactiveTime, wlsxSpoofedNewPhyAddress=wlsxSpoofedNewPhyAddress, wlsxAceUseageThreshold=wlsxAceUseageThreshold, wlsxChannelChanged=wlsxChannelChanged, staTransmitRate=staTransmitRate, wlsxLineCardNumber=wlsxLineCardNumber, wlsxSysXProcessorEntry=wlsxSysXProcessorEntry, wlsxUserEntryCreated=wlsxUserEntryCreated, apTotalTime=apTotalTime, staFrameLowSpeedRate=staFrameLowSpeedRate, wlsxSysXStorageTable=wlsxSysXStorageTable, wlsxSwitchAccessPointEntry=wlsxSwitchAccessPointEntry, wlsxAuthServerTimeout=wlsxAuthServerTimeout, wlsxUserEntryDeleted=wlsxUserEntryDeleted, wlsxFanFailure=wlsxFanFailure, apType=apType, wlsxSysXStorageEntry=wlsxSysXStorageEntry, licenseFlags=licenseFlags, apSignalToNoiseRatio=apSignalToNoiseRatio, wlsxPowerSupplyFailure=wlsxPowerSupplyFailure, staAccessPointBSSID=staAccessPointBSSID, wlsxUserEntryAuthenticated=wlsxUserEntryAuthenticated, apBSSFrameRetryRate=apBSSFrameRetryRate, wlsxSwitchMasterIp=wlsxSwitchMasterIp, wlsxLicenseExpiry=wlsxLicenseExpiry, wlsxSwitchIpv6=wlsxSwitchIpv6, licenseKey=licenseKey, apIpAddress=apIpAddress, wlsxLCRemoved=wlsxLCRemoved, wlsxPowerSupplyMissing=wlsxPowerSupplyMissing, apBSSTxPackets=apBSSTxPackets, wlsxSwitchLicenseTable=wlsxSwitchLicenseTable, wlsxSwitchUserEntry=wlsxSwitchUserEntry, sysXStorageIndex=sysXStorageIndex, wlsxVrMasterIp=wlsxVrMasterIp, apBSSRxPackets=apBSSRxPackets, wlsxSwitchRole=wlsxSwitchRole, sysXProcessorLoad=sysXProcessorLoad, wlsxSCRemoved=wlsxSCRemoved, licenseInstalled=licenseInstalled, wlsxLowMemory=wlsxLowMemory, wlsxSwitchListEntry=wlsxSwitchListEntry, wlsxAuthMaxAclEntries=wlsxAuthMaxAclEntries, apChannelFrameRetryRate=apChannelFrameRetryRate, wlsxSysXMemoryEntry=wlsxSysXMemoryEntry, wlsxAuthServerIsUp=wlsxAuthServerIsUp, staTxBytes=staTxBytes, wlsxSwitchUserTable=wlsxSwitchUserTable, sysXProcessorDescr=sysXProcessorDescr, wlsxSwitchStationStatsEntry=wlsxSwitchStationStatsEntry, sysXProcessorID=sysXProcessorID, wlsxSwitchMIB=wlsxSwitchMIB, wlsxSwitchTrapObjectsGroup=wlsxSwitchTrapObjectsGroup, wlsxVrrpOperState=wlsxVrrpOperState, wlsxUserEntryDeAuthenticated=wlsxUserEntryDeAuthenticated, apESSID=apESSID, globalAPState=globalAPState, wlsxLicenseDaysRemaining=wlsxLicenseDaysRemaining, userAuthenticationMethod=userAuthenticationMethod, wlsxSwitchTraps=wlsxSwitchTraps, apPhyType=apPhyType, wlsxDBIpAddress=wlsxDBIpAddress, apCurrentChannel=apCurrentChannel, wlsxDBCommunicationFailure=wlsxDBCommunicationFailure, wlsxDBUserName=wlsxDBUserName, wlsxVrID=wlsxVrID, userBWContractName=userBWContractName, apChannelBwRate=apChannelBwRate, userConnectedSlot=userConnectedSlot, staRxBytes=staRxBytes, wlsxSwitchGlobalAPTable=wlsxSwitchGlobalAPTable, wlsxSwitchStationMgmtTable=wlsxSwitchStationMgmtTable, wlsxWebCCLicenseEnforcement=wlsxWebCCLicenseEnforcement, wlsxStationBlackListReason=wlsxStationBlackListReason, wlsxVrrpStateChange=wlsxVrrpStateChange, wlsxSlotNumber=wlsxSlotNumber, wlsxOutOfRangeTemperature=wlsxOutOfRangeTemperature, wlsxESIServerDown=wlsxESIServerDown, apChannelNoise=apChannelNoise, PYSNMP_MODULE_ID=wlsxSwitchMIB, wlsxHostname=wlsxHostname, apPort=apPort, apBSSFrameReceiveErrorRate=apBSSFrameReceiveErrorRate, switchListSwitchRole=switchListSwitchRole, staFrameRetryRate=staFrameRetryRate, wlsxSwitchGlobalAPEntry=wlsxSwitchGlobalAPEntry, apChannelFrameReceiveErrorRate=apChannelFrameReceiveErrorRate, wlsxLicenseEntry=wlsxLicenseEntry, staPhyAddress=staPhyAddress, apLocation=apLocation, wlsxLCInserted=wlsxLCInserted, wlsxAccessPointIsDown=wlsxAccessPointIsDown, wlsxAccessPointInfoGroup=wlsxAccessPointInfoGroup, wlsxUserInfoGroup=wlsxUserInfoGroup, wlsxSwitchLicenseCount=wlsxSwitchLicenseCount, wlsxAPRadioAttributesChanged=wlsxAPRadioAttributesChanged, staUserName=staUserName, staRxPackets=staRxPackets, staFrameNonUnicastRate=staFrameNonUnicastRate, apBSSBwRate=apBSSBwRate, staFrameFragmentationRate=staFrameFragmentationRate, userRole=userRole, wlsxAccessPointIsUp=wlsxAccessPointIsUp, wlsxFanTrayInserted=wlsxFanTrayInserted, switchListSwitchIPAddress=switchListSwitchIPAddress, userBWContractUsage=userBWContractUsage, wlsxAuthServerName=wlsxAuthServerName, wlsxSwitchIp=wlsxSwitchIp, wlsxSysXProcessorTable=wlsxSysXProcessorTable, globalAPLocalSwitch=globalAPLocalSwitch, userLocation=userLocation, sysXMemoryUsed=sysXMemoryUsed, wlsxAuthServerReqTimedOut=wlsxAuthServerReqTimedOut, apBSSID=apBSSID, wlsxVoltageValue=wlsxVoltageValue, userPhyAddress=userPhyAddress, userConnectedVlan=userConnectedVlan, wlsxSysXMemoryTable=wlsxSysXMemoryTable, globalAPdot11gPhyAddr=globalAPdot11gPhyAddr, licenseService=licenseService, staUserRole=staUserRole, wlsxStationAddedToBlackList=wlsxStationAddedToBlackList, wlsxApTxPower=wlsxApTxPower, apChannelFrameLowSpeedRate=apChannelFrameLowSpeedRate, apBSSRxBytes=apBSSRxBytes, apReceiveRate=apReceiveRate, wlsxProcessExceedsMemoryLimits=wlsxProcessExceedsMemoryLimits, globalAPAddress=globalAPAddress, apChannelFrameNonUnicastRate=apChannelFrameNonUnicastRate, apChannelFrameFragmentationRate=apChannelFrameFragmentationRate, wlsxSwitchTotalNumStationsAssociated=wlsxSwitchTotalNumStationsAssociated, apBSSTxBytes=apBSSTxBytes, userName=userName, wlsxProcessDied=wlsxProcessDied, wlsxVoltageType=wlsxVoltageType, wlsxTemperatureValue=wlsxTemperatureValue, userConnectedPort=userConnectedPort, globalAPdot11aPhyAddr=globalAPdot11aPhyAddr, wlsxGBICInserted=wlsxGBICInserted, apBSSFrameNonUnicastRate=apBSSFrameNonUnicastRate, wlsxModelName=wlsxModelName, wlsxSwitchAccessPointStatsEntry=wlsxSwitchAccessPointStatsEntry, staAccessPointESSID=staAccessPointESSID, staFrameReceiveErrorRate=staFrameReceiveErrorRate, wlsxDBType=wlsxDBType, wlsxCoverageHoleDetected=wlsxCoverageHoleDetected, wlsxESIServerUp=wlsxESIServerUp, globalAPdot11bPhyAddr=globalAPdot11bPhyAddr, globalAPLocation=globalAPLocation, staTxPackets=staTxPackets, apBSSFrameFragmentationRate=apBSSFrameFragmentationRate, sysXMemorySize=sysXMemorySize, wlsxESIServerName=wlsxESIServerName, wlsxSwitchListTable=wlsxSwitchListTable, wlsxSwitchIPChanged=wlsxSwitchIPChanged, userUpTime=userUpTime, wlsxSwitchMasterIpv6=wlsxSwitchMasterIpv6, wlsxSwitchRoleChange=wlsxSwitchRoleChange, wlsxSwitchStationMgmtEntry=wlsxSwitchStationMgmtEntry, wlsxESIServerIpaddress=wlsxESIServerIpaddress, licenseExpires=licenseExpires, apSlot=apSlot)
