#
# PySNMP MIB module WLSX-RS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/lloyd.williams/u01/snmp/mibdump/asn1/WLSX-RS-MIB
# Produced by pysmi-0.3.4 at Tue Jan 31 16:13:59 2023
# On host COMP-C02DW0E1ML87 platform Darwin version 21.6.0 by user lloyd.williams
# Using Python version 3.11.1 (v3.11.1:a7a450f84a, Dec  6 2022, 15:24:06) [Clang 13.0.0 (clang-1300.0.29.30)]
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaPortDuplex, ArubaPortSpeed, ArubaEnet1Mode, ArubaAPDot1dState, ArubaPortType, ArubaEnableValue, ArubaDot3azStatus, ArubaOperStateValue, ArubaActiveState, ArubaPoeState = mibBuilder.importSymbols("ARUBA-TC", "ArubaPortDuplex", "ArubaPortSpeed", "ArubaEnet1Mode", "ArubaAPDot1dState", "ArubaPortType", "ArubaEnableValue", "ArubaDot3azStatus", "ArubaOperStateValue", "ArubaActiveState", "ArubaPoeState")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
LldpManAddress, LldpSystemCapabilitiesMap, LldpChassisId, LldpChassisIdSubtype, LldpPortId, LldpPortIdSubtype = mibBuilder.importSymbols("LLDP-MIB", "LldpManAddress", "LldpSystemCapabilitiesMap", "LldpChassisId", "LldpChassisIdSubtype", "LldpPortId", "LldpPortIdSubtype")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, TimeTicks, ModuleIdentity, snmpModules, Integer32, iso, MibIdentifier, Counter32, Bits, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "snmpModules", "Integer32", "iso", "MibIdentifier", "Counter32", "Bits", "Counter64", "IpAddress")
TDomain, MacAddress, TextualConvention, TruthValue, PhysAddress, TAddress, StorageType, TestAndIncr, RowStatus, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TDomain", "MacAddress", "TextualConvention", "TruthValue", "PhysAddress", "TAddress", "StorageType", "TestAndIncr", "RowStatus", "TimeInterval", "DisplayString")
wlanAPMacAddress, = mibBuilder.importSymbols("WLSX-WLAN-MIB", "wlanAPMacAddress")
wlsxRSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16))
wlsxRSMIB.setRevisions(('1911-06-01 20:12',))
if mibBuilder.loadTexts: wlsxRSMIB.setLastUpdated('1106012012Z')
if mibBuilder.loadTexts: wlsxRSMIB.setOrganization('Aruba Wireless Networks')
wlsxRemoteWiredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1))
wlsxRemoteUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2))
wlsxRemoteAccessPointPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1))
wlsxRemoteAccessPointUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1))
wlsxRemoteWiredPortTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteWiredPortTable.setStatus('current')
wlsxRemotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"))
if mibBuilder.loadTexts: wlsxRemotePortEntry.setStatus('current')
remotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: remotePortNumber.setStatus('current')
remotePortMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMAC.setStatus('current')
remotePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 3), ArubaEnet1Mode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMode.setStatus('current')
remotePortSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSlotNumber.setStatus('current')
remotePortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPortNumber.setStatus('current')
remotePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 6), ArubaPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortType.setStatus('current')
remotePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortAdminState.setStatus('current')
remotePortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 8), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortOperState.setStatus('current')
remotePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 9), ArubaPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSpeed.setStatus('current')
remotePortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 10), ArubaPortDuplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDuplex.setStatus('current')
remotePortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxPackets.setStatus('current')
remotePortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxBytes.setStatus('current')
remotePortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxPackets.setStatus('current')
remotePortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxBytes.setStatus('current')
remotePortDot3azStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 15), ArubaDot3azStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDot3azStatus.setStatus('current')
remotePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortName.setStatus('current')
remotePortPoEState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 17), ArubaPoeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPoEState.setStatus('current')
remotePortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 18), ArubaAPDot1dState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSTPState.setStatus('current')
wlsxRemoteUSBTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteUSBTable.setStatus('current')
wlsxUSBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "usbDevNumber"))
if mibBuilder.loadTexts: wlsxUSBEntry.setStatus('current')
usbDevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDevNumber.setStatus('current')
usbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbStatus.setStatus('current')
usbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbManufacturer.setStatus('current')
usbProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProduct.setStatus('current')
usbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbSerialNumber.setStatus('current')
usbVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbVendor.setStatus('current')
usbProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProductID.setStatus('current')
usbDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDriver.setStatus('current')
usbRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbRSSI.setStatus('current')
usbNetworkServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbNetworkServiceLevel.setStatus('current')
usbFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbFirmwareVersion.setStatus('current')
usbEsnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbEsnNumber.setStatus('current')
usbifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 13), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOperStatus.setStatus('current')
usbifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastPkts.setStatus('current')
usbifInUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastOctets.setStatus('current')
usbifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastPkts.setStatus('current')
usbifOutUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastOctets.setStatus('current')
usbifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInErrors.setStatus('current')
usbifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutErrors.setStatus('current')
wlsxRemoteWiredUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsTable.setStatus('current')
wlsxRemoteWiredUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1), ).setIndexNames((0, "WLSX-RS-MIB", "remoteWiredUserPhyAddress"))
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsEntry.setStatus('current')
remoteWiredUserPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: remoteWiredUserPhyAddress.setStatus('current')
remoteWiredUserSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserSlot.setStatus('current')
remoteWiredUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserPort.setStatus('current')
remoteWiredUserVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserVlan.setStatus('current')
remoteWiredUserTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxPkts.setStatus('current')
remoteWiredUserTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBytes.setStatus('current')
remoteWiredUserRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxPkts.setStatus('current')
remoteWiredUserRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxBytes.setStatus('current')
remoteWiredUserTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastPkts.setStatus('current')
remoteWiredUserTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastBytes.setStatus('current')
remoteWiredUserTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastPkts.setStatus('current')
remoteWiredUserTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastBytes.setStatus('current')
wlsxLldpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wlsxLldpNeighborTable.setStatus('current')
wlsxLldpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborEntry.setStatus('current')
lldpNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborIndex.setStatus('current')
lldpNeighborChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 2), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisIdSubtype.setStatus('current')
lldpNeighborChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 3), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisId.setStatus('current')
lldpNeighborPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 4), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortIdSubtype.setStatus('current')
lldpNeighborPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 5), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortId.setStatus('current')
lldpNeighborPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortDesc.setStatus('current')
lldpNeighborSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysName.setStatus('current')
lldpNeighborSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysDesc.setStatus('current')
lldpNeighborSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 9), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapSupported.setStatus('current')
lldpNeighborSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 10), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapEnabled.setStatus('current')
wlsxLldpNeighborManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrTable.setStatus('current')
wlsxLldpNeighborManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"), (0, "WLSX-RS-MIB", "lldpNeighborManAddrIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrEntry.setStatus('current')
lldpNeighborManAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborManAddrIndex.setStatus('current')
lldpNeighborManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddrSubtype.setStatus('current')
lldpNeighborManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 3), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddr.setStatus('current')
mibBuilder.exportSymbols("WLSX-RS-MIB", wlsxLldpNeighborManAddrTable=wlsxLldpNeighborManAddrTable, usbDevNumber=usbDevNumber, remotePortPoEState=remotePortPoEState, wlsxRemoteUSBTable=wlsxRemoteUSBTable, wlsxRSMIB=wlsxRSMIB, remotePortAdminState=remotePortAdminState, usbStatus=usbStatus, lldpNeighborChassisIdSubtype=lldpNeighborChassisIdSubtype, lldpNeighborSysCapEnabled=lldpNeighborSysCapEnabled, lldpNeighborIndex=lldpNeighborIndex, lldpNeighborPortIdSubtype=lldpNeighborPortIdSubtype, usbProductID=usbProductID, remoteWiredUserPhyAddress=remoteWiredUserPhyAddress, usbVendor=usbVendor, usbifOutUcastPkts=usbifOutUcastPkts, usbifOutUcastOctets=usbifOutUcastOctets, remoteWiredUserTxMCastPkts=remoteWiredUserTxMCastPkts, wlsxRemoteUSBGroup=wlsxRemoteUSBGroup, remoteWiredUserSlot=remoteWiredUserSlot, usbifInUcastOctets=usbifInUcastOctets, wlsxRemoteAccessPointUSBGroup=wlsxRemoteAccessPointUSBGroup, usbRSSI=usbRSSI, wlsxLldpNeighborManAddrEntry=wlsxLldpNeighborManAddrEntry, lldpNeighborPortId=lldpNeighborPortId, remotePortTxBytes=remotePortTxBytes, remoteWiredUserTxBytes=remoteWiredUserTxBytes, remotePortType=remotePortType, remotePortNumber=remotePortNumber, usbifOperStatus=usbifOperStatus, usbEsnNumber=usbEsnNumber, remoteWiredUserTxBCastBytes=remoteWiredUserTxBCastBytes, wlsxRemoteWiredUserStatsTable=wlsxRemoteWiredUserStatsTable, wlsxRemotePortEntry=wlsxRemotePortEntry, usbProduct=usbProduct, remoteWiredUserTxPkts=remoteWiredUserTxPkts, usbNetworkServiceLevel=usbNetworkServiceLevel, lldpNeighborSysDesc=lldpNeighborSysDesc, remotePortMode=remotePortMode, wlsxUSBEntry=wlsxUSBEntry, remotePortRxBytes=remotePortRxBytes, wlsxRemoteWiredUserStatsEntry=wlsxRemoteWiredUserStatsEntry, usbifInUcastPkts=usbifInUcastPkts, remotePortSlotNumber=remotePortSlotNumber, remoteWiredUserRxPkts=remoteWiredUserRxPkts, wlsxRemoteWiredGroup=wlsxRemoteWiredGroup, remotePortSTPState=remotePortSTPState, lldpNeighborPortDesc=lldpNeighborPortDesc, remoteWiredUserVlan=remoteWiredUserVlan, lldpNeighborManAddrIndex=lldpNeighborManAddrIndex, wlsxRemoteWiredPortTable=wlsxRemoteWiredPortTable, usbManufacturer=usbManufacturer, remoteWiredUserTxMCastBytes=remoteWiredUserTxMCastBytes, remotePortDot3azStatus=remotePortDot3azStatus, remotePortRxPackets=remotePortRxPackets, remotePortMAC=remotePortMAC, remotePortOperState=remotePortOperState, lldpNeighborManAddrSubtype=lldpNeighborManAddrSubtype, usbDriver=usbDriver, remoteWiredUserRxBytes=remoteWiredUserRxBytes, remoteWiredUserTxBCastPkts=remoteWiredUserTxBCastPkts, lldpNeighborChassisId=lldpNeighborChassisId, lldpNeighborSysCapSupported=lldpNeighborSysCapSupported, PYSNMP_MODULE_ID=wlsxRSMIB, usbifInErrors=usbifInErrors, remotePortTxPackets=remotePortTxPackets, lldpNeighborManAddr=lldpNeighborManAddr, wlsxLldpNeighborTable=wlsxLldpNeighborTable, usbSerialNumber=usbSerialNumber, remotePortPortNumber=remotePortPortNumber, remotePortSpeed=remotePortSpeed, remotePortName=remotePortName, remoteWiredUserPort=remoteWiredUserPort, usbFirmwareVersion=usbFirmwareVersion, wlsxLldpNeighborEntry=wlsxLldpNeighborEntry, remotePortDuplex=remotePortDuplex, usbifOutErrors=usbifOutErrors, lldpNeighborSysName=lldpNeighborSysName, wlsxRemoteAccessPointPortGroup=wlsxRemoteAccessPointPortGroup)
