#
# PySNMP MIB module WLSX-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/lloyd.williams/u01/snmp/mibdump/asn1/WLSX-AUTH-MIB
# Produced by pysmi-0.3.4 at Tue Jan 31 16:13:53 2023
# On host COMP-C02DW0E1ML87 platform Darwin version 21.6.0 by user lloyd.williams
# Using Python version 3.11.1 (v3.11.1:a7a450f84a, Dec  6 2022, 15:24:06) [Clang 13.0.0 (clang-1300.0.29.30)]
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaAuthenticationMethods, ArubaEnableValue, ArubaHashAlgorithms, ArubaEncryptionMethods, ArubaAuthServerType = mibBuilder.importSymbols("ARUBA-TC", "ArubaAuthenticationMethods", "ArubaEnableValue", "ArubaHashAlgorithms", "ArubaEncryptionMethods", "ArubaAuthServerType")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, iso, Unsigned32, Integer32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, snmpModules, MibIdentifier, Gauge32, NotificationType, ObjectIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "iso", "Unsigned32", "Integer32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "snmpModules", "MibIdentifier", "Gauge32", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks")
TAddress, TimeInterval, PhysAddress, StorageType, MacAddress, TestAndIncr, DisplayString, TDomain, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "TimeInterval", "PhysAddress", "StorageType", "MacAddress", "TestAndIncr", "DisplayString", "TDomain", "TextualConvention", "RowStatus", "TruthValue")
wlsxAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8))
wlsxAuthMIB.setRevisions(('1906-11-27 20:30',))
if mibBuilder.loadTexts: wlsxAuthMIB.setLastUpdated('0611272030Z')
if mibBuilder.loadTexts: wlsxAuthMIB.setOrganization('Aruba Wireless Networks')
wlsxAuthenticationServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1))
wlsxAuthenticationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 2))
wlsxAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 3))
wlsxAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: wlsxAuthenticationServerTable.setStatus('current')
wlsxAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxAuthenticationServerEntry.setStatus('current')
authServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: authServerName.setStatus('current')
authServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 2), ArubaAuthServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerType.setStatus('current')
authServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerAddress.setStatus('current')
authServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerPort.setStatus('current')
authServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerRetryCount.setStatus('current')
authServerTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerTimeOutValue.setStatus('current')
authServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerState.setStatus('current')
authServerInservice = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerInservice.setStatus('current')
authServerUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUsageCount.setStatus('current')
authServerSuccessfullAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerSuccessfullAuths.setStatus('current')
authServerFailedAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerFailedAuths.setStatus('current')
authServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerTimeouts.setStatus('current')
authServerAvgResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerAvgResponseTime.setStatus('current')
authServerOutStandingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerOutStandingRequests.setStatus('current')
authServerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUptime.setStatus('current')
wlsxPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2), )
if mibBuilder.loadTexts: wlsxPortalServerTable.setStatus('current')
wlsxPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "portalServerIndex"))
if mibBuilder.loadTexts: wlsxPortalServerEntry.setStatus('current')
portalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: portalServerIndex.setStatus('current')
portalServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerHost.setStatus('current')
portalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPort.setStatus('current')
portalServerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPage.setStatus('current')
portalServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerProtocol.setStatus('current')
wlsxLdapServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5), )
if mibBuilder.loadTexts: wlsxLdapServerStateTable.setStatus('current')
wlsxLdapServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxLdapServerStateEntry.setStatus('current')
ldapInitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapInitDone.setStatus('current')
ldapAdminBound = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapAdminBound.setStatus('current')
ldapReBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapReBindCount.setStatus('current')
mibBuilder.exportSymbols("WLSX-AUTH-MIB", authServerRetryCount=authServerRetryCount, wlsxAuthMIB=wlsxAuthMIB, authServerAddress=authServerAddress, authServerUptime=authServerUptime, authServerPort=authServerPort, authServerOutStandingRequests=authServerOutStandingRequests, ldapInitDone=ldapInitDone, authServerFailedAuths=authServerFailedAuths, wlsxAuthenticationServerGroup=wlsxAuthenticationServerGroup, portalServerProtocol=portalServerProtocol, authServerName=authServerName, wlsxLdapServerStateEntry=wlsxLdapServerStateEntry, ldapAdminBound=ldapAdminBound, authServerTimeOutValue=authServerTimeOutValue, portalServerHost=portalServerHost, ldapReBindCount=ldapReBindCount, authServerTimeouts=authServerTimeouts, portalServerPort=portalServerPort, authServerState=authServerState, wlsxAuthenticationServerTable=wlsxAuthenticationServerTable, wlsxPortalServerEntry=wlsxPortalServerEntry, authServerSuccessfullAuths=authServerSuccessfullAuths, authServerInservice=authServerInservice, wlsxAuthenticationServerEntry=wlsxAuthenticationServerEntry, PYSNMP_MODULE_ID=wlsxAuthMIB, portalServerPage=portalServerPage, wlsxLdapServerStateTable=wlsxLdapServerStateTable, wlsxAuthenticationInfoGroup=wlsxAuthenticationInfoGroup, authServerUsageCount=authServerUsageCount, authServerAvgResponseTime=authServerAvgResponseTime, authServerType=authServerType, wlsxPortalServerTable=wlsxPortalServerTable, wlsxAuthenticationGroup=wlsxAuthenticationGroup, portalServerIndex=portalServerIndex)
